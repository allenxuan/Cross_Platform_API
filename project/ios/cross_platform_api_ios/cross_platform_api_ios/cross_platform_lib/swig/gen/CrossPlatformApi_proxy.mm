/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */
#include "CrossPlatformApi_proxy.h"
#include "CrossPlatformApi_wrap.mm"


@implementation StrVec
-(void*)getCptr
{
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject 
{
	swigCPtr = cptr;
	swigCMemOwn = ownCObject;
	self = [super init];
	return self;
}

-(id)init
{
 	self = [self initWithCptr:Objc_CrossPlatformApi_new_StrVec() swigOwnCObject:YES]; 
	;
	return self;

}

-(unsigned long)size
{
    return Objc_CrossPlatformApi_StrVec_size([self getCptr]); 
}

-(unsigned long)capacity
{
    return Objc_CrossPlatformApi_StrVec_capacity([self getCptr]); 
}

-(void)reserve: (unsigned long)n
{
    Objc_CrossPlatformApi_StrVec_reserve([self getCptr], n);
}

-(BOOL)isEmpty
{
    return Objc_CrossPlatformApi_StrVec_isEmpty([self getCptr]); 
}

-(void)clear
{
    Objc_CrossPlatformApi_StrVec_clear([self getCptr]);
}

-(void)add: (NSString*)x
{
    Objc_CrossPlatformApi_StrVec_add([self getCptr], x);
}

-(NSString*)get: (int)i
{
    return Objc_CrossPlatformApi_StrVec_get([self getCptr], i); 
}

-(void)set: (int)i val: (NSString*)val
{
    Objc_CrossPlatformApi_StrVec_set([self getCptr], i, val);
}


-(void)dealloc{
      if (swigCPtr != NULL) 
	{
		;

		if (swigCMemOwn) 
		{
			Objc_CrossPlatformApi_delete_StrVec((void*)swigCPtr);
			swigCMemOwn = NO;
		}
		swigCPtr = NULL;
	} 
}

@end


@implementation ApiCenter
-(void*)getCptr
{
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject 
{
	swigCPtr = cptr;
	swigCMemOwn = ownCObject;
	self = [super init];
	return self;
}

-(id)init
{
 	self = [self initWithCptr:Objc_CrossPlatformApi_new_ApiCenter() swigOwnCObject:YES]; 
	;
	return self;

}

-(void)registerModelCallback: (ModelCallback*)callback
{
    Objc_CrossPlatformApi_ApiCenter_registerModelCallback([self getCptr], [callback getCptr]);
}

-(void)unRegisterModelCallback: (ModelCallback*)callback
{
    Objc_CrossPlatformApi_ApiCenter_unRegisterModelCallback([self getCptr], [callback getCptr]);
}

-(Model*)getModelPtr
{
 #error "typemaps for cross_platform_external::Model & not available" 
}

-(Model*)getModelSharedPtr
{
    void* cPtr = Objc_CrossPlatformApi_ApiCenter_getModelSharedPtr([self getCptr]);
	Model* ret = nil;
	if(cPtr) {
		ret = [[Model alloc] initWithCptr:cPtr swigOwnCObject:YES];
	}
	return ret; 
}

-(float)sumIntAndFloat
{
    return Objc_CrossPlatformApi_ApiCenter_sumIntAndFloat([self getCptr]); 
}

-(NSString*)getString
{
    return Objc_CrossPlatformApi_ApiCenter_getString([self getCptr]); 
}

-(void)setString: (NSString*)string
{
    Objc_CrossPlatformApi_ApiCenter_setString([self getCptr], string);
}

-(void)setVector: (StrVec*)vector
{
    Objc_CrossPlatformApi_ApiCenter_setVector([self getCptr], [vector getCptr]);
}


-(void)dealloc{
      if (swigCPtr != NULL) 
	{
		;

		if (swigCMemOwn) 
		{
			Objc_CrossPlatformApi_delete_ApiCenter((void*)swigCPtr);
			swigCMemOwn = NO;
		}
		swigCPtr = NULL;
	} 
}

@end


@implementation Model
-(void*)getCptr
{
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject 
{
	swigCPtr = cptr;
	swigCMemOwn = ownCObject;
	self = [super init];
	return self;
}

-(void)setA_uint64: (unsigned long long)value
{
    Objc_CrossPlatformApi_Model_a_uint64_set([self getCptr], value);
}

-(unsigned long long)getA_uint64
{
    return Objc_CrossPlatformApi_Model_a_uint64_get([self getCptr]); 
}

-(void)setA_float: (float)value
{
    Objc_CrossPlatformApi_Model_a_float_set([self getCptr], value);
}

-(float)getA_float
{
    return Objc_CrossPlatformApi_Model_a_float_get([self getCptr]); 
}

-(void)setA_string: (NSString*)value
{
    Objc_CrossPlatformApi_Model_a_string_set([self getCptr], value);
}

-(NSString*)getA_string
{
    return Objc_CrossPlatformApi_Model_a_string_get([self getCptr]); 
}

-(void)setA_vector: (StrVec*)value
{
    Objc_CrossPlatformApi_Model_a_vector_set([self getCptr], [value getCptr]);
}

-(StrVec*)getA_vector
{
    void* cPtr = Objc_CrossPlatformApi_Model_a_vector_get([self getCptr]);
	StrVec* ret = nil;
	if(cPtr) {
	ret = [[StrVec alloc] initWithCptr:cPtr swigOwnCObject:NO];
	}
	return ret; 
}

-(id)init
{
 	self = [self initWithCptr:Objc_CrossPlatformApi_new_Model() swigOwnCObject:YES]; 
	;
	return self;

}


-(void)dealloc{
   if (swigCPtr != NULL) {
		;

		if (swigCMemOwn) {
			Objc_CrossPlatformApi_delete_Model((void*)swigCPtr);
			swigCMemOwn = NO;
		}
		swigCPtr = NULL;
	} 
}

@end


@implementation ModelCallback
-(void*)getCptr
{
	return swigCPtr;
}

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject 
{
	swigCPtr = cptr;
	swigCMemOwn = ownCObject;
	self = [super init];
	return self;
}

-(id)init
{
 	self = [self initWithCptr:Objc_CrossPlatformApi_new_ModelCallback() swigOwnCObject:YES]; 
	if (self) Objc_CrossPlatformApi_swigDirectorConnect((void *)swigCPtr, self); ;
	return self;

}

-(void)onModelChangedPtr: (Model*)model_ptr
{
    Objc_CrossPlatformApi_ModelCallback_onModelChangedPtr([self getCptr], [model_ptr getCptr]);
}

-(void)onModelChangedSharedPtr: (Model*)model_shared_ptr
{
    Objc_CrossPlatformApi_ModelCallback_onModelChangedSharedPtr([self getCptr], [model_shared_ptr getCptr]);
}


-(void)dealloc{
   if (swigCPtr != NULL) {
		Objc_CrossPlatformApi_swigDirectorDisconnect((void *)swigCPtr);;

		if (swigCMemOwn) {
			Objc_CrossPlatformApi_delete_ModelCallback((void*)swigCPtr);
			swigCMemOwn = NO;
		}
		swigCPtr = NULL;
	} 
}

@end

